---
name: first-network-org1 with fabric 1.4.x
version: 1.0.0

client:
  # The value must be the name of an org defined under "organizations"
  organization: Org1
  logging:
    level: info

  # Root of the MSP directories with keys and certs.
  cryptoconfig:
    path: /Users/ymh/go/src/github.com/hyperledger/fabric-samples/first-network/crypto-config

  credentialStore:
    path: /tmp/state-store/cert
    cryptoStore:
      path: /tmp/state-store/msp

  # BCCSP config for the client. Used by GO SDK.
  BCCSP:
    security:
      enabled: true
      # SW/GM SHA2/GMSM3
      default:
        provider: "SW"
      hashAlgorithm: "SHA2"
      softVerify: true
      level: 256

  # Global configuration for peer, event service and orderer timeouts
  peer:
    timeout:
      connection: 10s
      queryResponse: 45s
      executeTxResponse: 30s
  eventService:
    timeout:
      connection: 50s
      registrationResponse: 50s
  orderer:
    timeout:
      connection: 5s
      response: 45s

#
# [Optional]. But most apps would have this section so that channel objects can be constructed
# based on the content below. If an app is creating channels, then it likely will not need this
# section.
#
channels:
  mychannel:
    peers:
      peer0.org1.example.com:
      peer1.org1.example.com:

#
# list of participating organizations in this network
#
organizations:
  Org1:
    mspid: Org1MSP
    cryptoPath: /Users/ymh/go/src/github.com/hyperledger/fabric-samples/first-network/crypto-config/peerOrganizations/org1.example.com/users/User1@org1.example.com/msp
    peers:
      - peer0.org1.example.com
      - peer1.org1.example.com
    certificateAuthorities:
      - ca.org1.example.com

#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:
  orderer.example.com:
    url: grpcs://127.0.0.1:7050
    grpcOptions:
      ssl-target-name-override: orderer.example.com
      hostnameOverride: orderer.example.com
    tlsCACerts:
      path: /Users/ymh/go/src/github.com/hyperledger/fabric-samples/first-network/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem

#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  peer0.org1.example.com:
    url: grpcs://127.0.0.1:7051
    grpcOptions:
      ssl-target-name-override: peer0.org1.example.com
      hostnameOverride: peer0.org1.example.com
    tlsCACerts:
      path: /Users/ymh/go/src/github.com/hyperledger/fabric-samples/first-network/crypto-config/peerOrganizations/org1.example.com/users/User1@org1.example.com/tls/ca.crt

  peer1.org1.example.com:
    url: grpcs://127.0.0.1:8051
    grpcOptions:
      ssl-target-name-override: peer1.org1.example.com
      hostnameOverride: peer1.org1.example.com
    tlsCACerts:
      path: /Users/ymh/go/src/github.com/hyperledger/fabric-samples/first-network/crypto-config/peerOrganizations/org1.example.com/users/User1@org1.example.com/tls/ca.crt

#
# Fabric-CA is a special kind of Certificate Authority provided by Hyperledger Fabric which allows
# certificate management to be done via REST APIs. Application may choose to use a standard
# Certificate Authority instead of Fabric-CA, in which case this section would not be specified.
#
certificateAuthorities:
  ca.org1.example.com:
    url: https://ca.org1.example.com:7054
    caName: ca-org1
    tlsCACerts:
      path: /Users/ymh/go/src/github.com/hyperledger/fabric-samples/first-network/crypto-config/peerOrganizations/org1.example.com/ca/ca.org1.example.com-cert.pem
      client:
        key:
          path: /Users/ymh/go/src/github.com/hyperledger/fabric-samples/first-network/crypto-config/peerOrganizations/org1.example.com/users/User1@org1.example.com/tls/client.key
        cert:
          path: /Users/ymh/go/src/github.com/hyperledger/fabric-samples/first-network/crypto-config/peerOrganizations/org1.example.com/users/User1@org1.example.com/tls/client.crt
    registrar:
      enrollId: admin
      enrollSecret: adminpw

entityMatchers:
  orderer:
    - pattern: (\w+).example.(\w+)
      urlSubstitutionExp: grpcs://127.0.0.1:7050
      sslTargetOverrideUrlSubstitutionExp: orderer.example.com
      mappedHost: orderer.example.com
